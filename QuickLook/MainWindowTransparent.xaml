<controls:MainWindowBase
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:busyDecorator="clr-namespace:QuickLook.Controls.BusyDecorator"
    xmlns:glassLayer="clr-namespace:QuickLook.Controls.GlassLayer"
    xmlns:converters="clr-namespace:QuickLook.Converters"
    xmlns:controls="clr-namespace:QuickLook.Controls"
    mc:Ignorable="d" x:Class="QuickLook.MainWindowTransparent" x:Name="mainWindow"
    UseLayoutRounding="True"
    d:DesignWidth="624" d:DesignHeight="700"
    MinWidth="400" MinHeight="200"
    WindowStartupLocation="CenterScreen"
    Focusable="False" WindowStyle="None"
    AllowsTransparency="True"
    Background="Transparent"
    ShowActivated="False" ShowInTaskbar="False">
    <controls:MainWindowBase.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Styles/MainWindowStyles.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <converters:BooleanToResizeModeConverter x:Key="BooleanToResizeModeConverter" />
            <converters:WindowStateToThicknessConverter x:Key="WindowStateToThicknessConverter" />
            <converters:BooleanToResizeBorderThicknessConverter x:Key="BooleanToResizeBorderThicknessConverter" />
            <converters:BooleanToVisibilityCollapsedConverter x:Key="BooleanToVisibilityCollapsedConverter" />
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        </ResourceDictionary>
    </controls:MainWindowBase.Resources>
    <controls:MainWindowBase.Style>
        <Style TargetType="controls:MainWindowBase">
            <Setter Property="Foreground" Value="{DynamicResource WindowTextForeground}" />
            <Setter Property="ResizeMode"
                    Value="{Binding ContextObject.CanResize, ElementName=mainWindow, Converter={StaticResource BooleanToResizeModeConverter}}" />
            <Setter Property="WindowChrome.WindowChrome">
                <Setter.Value>
                    <WindowChrome CaptionHeight="0"
                                  ResizeBorderThickness="{Binding ContextObject.CanResize, Converter={StaticResource BooleanToResizeBorderThicknessConverter}, ElementName=mainWindow}"
                                  UseAeroCaptionButtons="False" />
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="WindowState" Value="Maximized">
                    <Setter Property="WindowChrome.WindowChrome">
                        <Setter.Value>
                            <WindowChrome CaptionHeight="0" ResizeBorderThickness="0" UseAeroCaptionButtons="False" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </controls:MainWindowBase.Style>
    <Border>
        <Border.Effect>
            <DropShadowEffect BlurRadius="{StaticResource MainWindowShadowBlurRadius}" ShadowDepth="0" Opacity="0.6"
                              Color="{DynamicResource MainWindowShadowColor}" />
        </Border.Effect>
        <Grid x:Name="windowFrameContainer" Background="{DynamicResource MainWindowBackground}"
              Margin="{Binding WindowState, ElementName=mainWindow, Converter={StaticResource WindowStateToThicknessConverter}, ConverterParameter={StaticResource MainWindowShadowPaddingThinkness}}">
            <Grid x:Name="viewerRootContainer" ZIndex="190">
                <Grid x:Name="windowCaptionContainer" Height="{StaticResource MainWindowCaptionHeight}"
                      VerticalAlignment="Top"
                      ZIndex="100">
                    <Grid.Resources>
                        <Storyboard x:Key="ShowCaptionContainerStoryboard" Completed="AutoHideCaptionContainer">
                            <DoubleAnimation
                                Storyboard.Target="{Binding Source={x:Reference windowCaptionContainer}}"
                                Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.05" />
                        </Storyboard>
                        <Storyboard x:Key="HideCaptionContainerStoryboard">
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.Target="{Binding Source={x:Reference windowCaptionContainer}}"
                                Storyboard.TargetProperty="Opacity">
                                <DoubleAnimationUsingKeyFrames.KeyFrames>
                                    <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0" />
                                    <LinearDoubleKeyFrame Value="1" KeyTime="0:0:1" />
                                    <LinearDoubleKeyFrame Value="0" KeyTime="0:0:1.05" />
                                </DoubleAnimationUsingKeyFrames.KeyFrames>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </Grid.Resources>
                    <glassLayer:GlassLayer OverlayColor="{DynamicResource CaptionBackground}"
                                           BlurredElement="{Binding ElementName=containerPanel}"
                                           ColorOverlayVisibility="{Binding ContextObject.TitlebarColourVisibility, ElementName=mainWindow, Converter={StaticResource BooleanToVisibilityConverter}}"
                                           GlassVisibility="{Binding ContextObject.TitlebarBlurVisibility, ElementName=mainWindow, Converter={StaticResource BooleanToVisibilityConverter}}"
                                           NoiseVisibility="{Binding ContextObject.TitlebarBlurVisibility, ElementName=mainWindow, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    <DockPanel>
                        <Button DockPanel.Dock="Right" x:Name="buttonCloseWindow"
                                Style="{StaticResource CaptionCloseButtonStyle}" Content="&#xE894;" />
                        <Button DockPanel.Dock="Right" x:Name="buttonWindowStatus"
                                Visibility="{Binding ContextObject.CanResize, ElementName=mainWindow, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource CaptionButtonStyle}">
                                    <Setter Property="Content" Value="&#xE740;" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding WindowState, ElementName=mainWindow}"
                                                     Value="Maximized">
                                            <Setter Property="Content" Value="&#xE73F;" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button x:Name="buttonOpenWith" DockPanel.Dock="Right" MaxWidth="190" 
                                Style="{StaticResource CaptionTextButtonStyle}">
                            <Button.Content>
                                <TextBlock x:Name="buttonOpenWithText" VerticalAlignment="Center" TextTrimming="CharacterEllipsis">
                                    Open with <Bold>AppName</Bold>
                                </TextBlock>
                            </Button.Content>
                        </Button>
                        <Button DockPanel.Dock="Left" x:Name="buttonPin" Tag="Auto">
                            <Button.Resources>
                                <Grid x:Key="ContentPin">
                                    <TextBlock>&#xE840;</TextBlock>
                                    <TextBlock>&#xE842;</TextBlock>
                                </Grid>
                                <Grid x:Key="ContentPinTop">
                                    <TextBlock>&#xE840;</TextBlock>
                                    <TextBlock>&#xE842;</TextBlock>
                                    <TextBlock>&#xE889;</TextBlock>
                                </Grid>
                            </Button.Resources>
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource CaptionButtonStyle}">
                                    <Setter Property="Content" Value="&#xE840;" />
                                    <Style.Triggers>
                                        <Trigger Property="Tag" Value="Auto">
                                            <Setter Property="Content" Value="&#xE840;" />
                                        </Trigger>
                                        <Trigger Property="Tag" Value="PinTop">
                                            <Setter Property="Content" Value="{StaticResource ContentPinTop}" />
                                        </Trigger>
                                        <Trigger Property="Tag" Value="Pin">
                                            <Setter Property="Content" Value="{StaticResource ContentPin}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button DockPanel.Dock="Left" x:Name="buttonShare" Style="{StaticResource CaptionButtonStyle}"
                                Content="&#xE72D;" />
                        <Grid x:Name="titleArea" Background="Transparent">
                            <TextBlock Text="{Binding ContextObject.Title, ElementName=mainWindow}" FontSize="12"
                                       HorizontalAlignment="Left" TextTrimming="CharacterEllipsis"
                                       VerticalAlignment="Center" Margin="5,0" />
                        </Grid>
                    </DockPanel>
                </Grid>
                <DockPanel x:Name="containerPanel" Background="{DynamicResource MainWindowBackground}" ZIndex="80">
                    <Grid DockPanel.Dock="Top" Height="{StaticResource MainWindowCaptionHeight}"
                          Visibility="{Binding ContextObject.TitlebarOverlap, ElementName=mainWindow, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                    <ContentControl x:Name="container"
                                    Foreground="{DynamicResource WindowTextForeground}"
                                    Content="{Binding ContextObject.ViewerContent, ElementName=mainWindow}" />
                    <DockPanel.Style>
                        <Style TargetType="{x:Type DockPanel}">
                            <Setter Property="Visibility" Value="Visible" />
                            <Style.Triggers>
                                <DataTrigger
                                    Binding="{Binding ContextObject.IsBusy, ElementName=mainWindow}"
                                    Value="True">
                                    <Setter Property="Visibility" Value="Hidden" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DockPanel.Style>
                </DockPanel>
            </Grid>
            <Grid x:Name="busyIndicatorLayer" Background="{DynamicResource MainWindowBackground}" ZIndex="200">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Style.Triggers>
                            <DataTrigger
                                Binding="{Binding ContextObject.IsBusy, ElementName=mainWindow}"
                                Value="True">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <busyDecorator:BusyDecorator x:Name="busyDecorator"
                                             IsBusyIndicatorShowing="True"
                                             VerticalAlignment="Center"
                                             HorizontalAlignment="Center" />
            </Grid>
        </Grid>
    </Border>
</controls:MainWindowBase>