<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unosquare.FFmpegMediaElement</name>
    </assembly>
    <members>
        <member name="T:Unosquare.FFmpegMediaElement.Constants">
            <summary>
            Defines various constants used across all classes
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.FFmpegMedia">
            <summary>
            Represents a multimedia source with its corresponding control methods.
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.FFmpegMedia.AudioBufferProvider">
            <summary>
            Provides audio data samples in PCM, 16-bit format.
            This class is used to keep track of the samples and matching frames times
            It also ensures samples are not repeated and are unique in a discrete timeline
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.AudioBufferProvider.#ctor(Unosquare.FFmpegMediaElement.FFmpegMedia)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFmpegMediaElement.FFmpegMedia.AudioBufferProvider"/> class.
            </summary>
            <param name="media">The media.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.AudioBufferProvider.Clear">
            <summary>
            Clears the buffer and frame times
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.AudioBufferProvider.ProvideNext(System.Byte[])">
            <summary>
            Provides the next small buffer that the audio device requests.
            the buffer to fill is a non-null reference to the buffer that needs to be filled
            The return value represents how many bytes were written to buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.IsInFirstTimeSegment">
            <summary>
            Gets a value indicating whether the wall clock is in the first time segment.
            </summary>
            <value>
            <c>true</c> if this instance is in first time segment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.IsInLastTimeSegment">
            <summary>
            Gets a value indicating whether the wall clock is in the last time segment.
            </summary>
            <value>
            <c>true</c> if this instance is in last time segment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.CheckFrameBounds">
            <summary>
            Gets a value indicating whether frame bound should be checked.
            Typically, if the realtime clock is in the first time segment, we don't check for bounds
            </summary>
            <value>
              <c>true</c> if [check frame bounds]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.WaitForPlaybackReadyState">
            <summary>
            Waits for the frame extractor to be ready for playback.
            Returns true if successful, false if it timed out.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.NaturalDuration">
            <summary>
            Gets the estimated duration in number of seconds.
            This is not necessarily the real, precise duration in all media streams but it tends to be extremely close.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.StartTime">
            <summary>
            Gets the start time of the leading media stream.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.EndTime">
            <summary>
            Gets the end time of the leading media stream.
            </summary>
            <value>
            The end time.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.IsLiveStream">
            <summary>
            Determines if the input is a live stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.Position">
            <summary>
            Gets the current position in number of seconds.
            Use the Seek method to move to a different position within the input.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.QueryIsFrameAvailable(System.Decimal)">
            <summary>
            Queries if a leading frame for the given position is immediately available.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.Volume">
            <summary>
            Gets or sets the volume of the current session.
            Valid ranges are anything from 0 to 1
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.SpeedRatio">
            <summary>
            Gets or sets the video playback speed ratio.
            By default the speed ratio is 1.0M
            Note: Audio will not be rendered when the speed ratio is not exactly 1.0M
            </summary>
            <value>
            The speed ratio.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.IsAtEndOfStream">
            <summary>
            Gets a value indicating whether we have reached the end of stream.
            This does not necessarily means the media has reached an end. It simply means that all
            data within the media has been read (not necessarily that it all has been rendered).
            </summary>
            <value>
            <c>true</c> if this we are at end of stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.HasMediaEnded">
            <summary>
            Gets a value indicating whether the real-time clock is on the last media frame.
            </summary>
            <value>
            <c>true</c> if this instance has media ended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMedia.IsPlaying">
            <summary>
            Gets a value indicating whether the media is playing.
            </summary>
            <value>
            <c>true</c> if the media is playing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.Mute">
            <summary>
            Sets the Volume to 0
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.Play">
            <summary>
            Starts or resumes media playback
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.Pause">
            <summary>
            Pauses media playback
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.Stop">
            <summary>
            Rewinds and pauses media playback
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.Seek(System.Decimal)">
            <summary>
            Seeks to the specified target second.
            </summary>
            <param name="targetSecond">The target second.</param>
        </member>
        <member name="E:Unosquare.FFmpegMediaElement.FFmpegMedia.PropertyChanged">
            <summary>
            Multicast event for property change notifications.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.#ctor(System.String,Unosquare.FFmpegMediaElement.FFmpegMedia.MediaErrorOccurredCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFmpegMediaElement.FFmpegMedia"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="errorCallback">The error callback.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.#ctor(System.String,Unosquare.FFmpegMediaElement.FFmpegMedia.MediaErrorOccurredCallback,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFmpegMediaElement.FFmpegMedia" /> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="errorCallback">The error callback.</param>
            <param name="referer">The referer. Leave null or emtpy to skip setting it.</param>
            <param name="userAgent">The user agent. Leave null or empty in order to skip setting a User Agent</param>
            <exception cref="T:System.ArgumentException">errorCallback cannot be null
            or
            filePath cannot be null or empty</exception>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.ArgumentException">errorCallback cannot be null
            or
            filePath cannot be null or empty</exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.InternalSeekInput(System.Decimal)">
            <summary>
            Internals the seek input.
            </summary>
            <param name="renderTime">The render time.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.ExtractMediaFramesContinuously">
            <summary>
            Extracts the media frames continuously.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.RenderVideoImage(System.Object,System.EventArgs)">
            <summary>
            Renders the video image. This method is called on a Dispatcher timer.
            It is responsible for rendering the decoded video image continuously.
            It also avoids rendering the same image again.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.RenderAudioBuffer(System.Byte[],System.Int32@)">
            <summary>
            Renders the audio buffer. This is the implementation of IAudioDataProvider.RenderAudioBufferMethod
            It basically gets the decoded PCM bytes from the audio buffer provider. This method is called by the audio device itself.
            </summary>
            <param name="bufferToFill">The buffer to fill.</param>
            <param name="bytesWritten">The bytes written.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.InitializeMedia(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes the internal transcoder -- This create the input, processing, and output blocks that make
            up the video and audio decoding stream.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="inputFormatName">Name of the input format. Leave null or empty to detect automatically</param>
            <param name="referer">The referer. Leave null or empty to skip setting it</param>
            <param name="userAgent">The user agent. Leave null or empty to skip setting it.</param>
            <exception cref="T:System.IO.FileFormatException"></exception>
            <exception cref="T:System.Exception">Could not find stream info
            or
            Media must contain at least a video or and audio stream</exception>
            <exception cref="T:System.Exception">Could not open file
            or
            Could not find stream info
            or
            Media must contain a video stream
            or
            Media must contain an audio stream
            or
            Unsupported codec
            or
            Could not initialize the output conversion context
            or
            Could not create output codec context from input
            or
            Could not open codec</exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.InitializeAudio">
            <summary>
            Initializes the audio.
            </summary>
            <exception cref="T:System.Exception">
            Unsupported audio codec
            or
            Could not create audio output codec context from input
            or
            Could not open codec
            </exception>
            <exception cref="T:System.InvalidOperationException">Could not load media file</exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.PullMediaFrame">
            <summary>
            Pulls the next-available frame. This does not queue the frame in either the video or audio queue.
            Please keep in mind that you will need to manually call the Release() method the returned object
            are done with it. If working with Media Caches, the cache will automatically release the frame
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception">Error while decoding frame</exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMedia.Dispose">
            <summary>
            Releases all managed and unmanaged resources
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.MediaElement">
            <summary>
            Represents a control that contains audio and/or video.
            In contrast with System.Windows.Controls.MediaElement, this version uses
            the FFmpeg library to perform reading and decoding of media streams.
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.MediaElement.PropertyNames">
            <summary>
            Defines constants for Property Names that are used to
            either register dependency properties or notify property changes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Unosquare.FFmpegMediaElement.MediaElement.SourceProperty" -->
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.OnSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [source property changed].
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.Source">
            <summary>
            Gets/Sets the Source on this MediaElement. 
            The Source property is the Uri of the media to be played.
            Note: Currently, this does not support the pack protocol (pack://)
            </summary> 
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.StretchProperty">
            <summary>
            DependencyProperty for Stretch property. 
            </summary> 
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.OnStretchPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [stretch property changed].
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.Stretch">
            <summary>
            Gets/Sets the Stretch on this MediaElement.
            The Stretch property determines how large the MediaElement will be drawn. 
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.StretchDirectionProperty">
            <summary> 
            DependencyProperty for StretchDirection property.
            </summary> 
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.OnStretchDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [stretch direction property changed].
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.StretchDirection">
            <summary> 
            Gets/Sets the stretch direction of the Viewbox, which determines the restrictions on
            scaling that are applied to the content inside the Viewbox.  For instance, this property 
            can be used to prevent the content from being smaller than its native size or larger than 
            its native size.
            </summary> 
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.VolumeProperty">
            <summary> 
                The DependencyProperty for the MediaElement.Volume property.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.Volume">
            <summary>
            Gets/Sets the Volume property on the MediaElement.
            Note: Valid values are from 0 to 1
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.BalanceProperty">
            <summary>
                The DependencyProperty for the MediaElement.Balance property. 
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.Balance">
            <summary>
            Gets/Sets the Balance property on the MediaElement. 
            Note: Balance changes are not yet supported. Value will always be 0;
            </summary> 
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.ScrubbingEnabledProperty">
            <summary>
            The DependencyProperty for the MediaElement.ScrubbingEnabled property.
            </summary> 
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.ScrubbingEnabled">
            <summary>
            Gets/Sets the ScrubbingEnabled property on the MediaElement.
            Note: Frame scrubbing is always enabled. The real effect of this property is
            that when it is set to true, setting values on the Position property occurs synchronously.
            Wehn it is set to false, setting values on the Position property occurs asyncrhonously
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.UnloadedBehaviorProperty">
            <summary> 
            The DependencyProperty for the MediaElement.UnloadedBehavior property. 
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.UnloadedBehavior">
            <summary>
            Specifies how the underlying media should behave when the given 
            MediaElement is unloaded, the default behavior is to Close the 
            media.
            </summary> 
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.LoadedBehaviorProperty">
            <summary>
            The DependencyProperty for the MediaElement.LoadedBehavior property.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.LoadedBehavior">
            <summary>
            Specifies the behavior that the media element should have when it 
            is loaded. The default behavior is that it is under manual control 
            (i.e. the caller should call methods such as Play in order to play
            the media). If a source is set, then the default behavior changes to 
            to be playing the media. If a source is set and a loaded behavior is
            also set, then the loaded behavior takes control.
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.IsMutedProperty">
            <summary> 
            The DependencyProperty for the MediaElement.IsMuted property.
            </summary> 
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.IsMuted">
            <summary>
            Gets/Sets the IsMuted property on the MediaElement.
            Note: Muting Sets the Volume to 0; Unmuting set the volume to what
            it originally was before muting.
            </summary> 
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.PositionProperty">
            <summary>
                The DependencyProperty for the MediaElement.Position property. 
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.SeekPositionUpdateTimerTick(System.Object,System.EventArgs)">
            <summary>
            Callback when the seek position timer ticks.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.Position">
            <summary>
            Gets/Sets the Position property on the MediaElement. 
            </summary> 
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.SpeedRatioProperty">
            <summary>
                The DependencyProperty for the MediaElement.SpeedRatio property. 
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.SpeedRatio">
            <summary>
            Gets/Sets the SpeedRatio property on the MediaElement. 
            </summary> 
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.UserAgentProperty">
            <summary>
            Dependency property for the user agent property
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.UserAgent">
            <summary>
            Gets or sets the user agent. Property takes effect only upon loading
            live streams such as m3u8 files.
            </summary>
            <value>
            The user agent.
            </value>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.RefererProperty">
            <summary>
            Dependency property for the Referer property
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.Referer">
            <summary>
            Gets or sets the referer. Property takes effect only upon loading
            live streams such as m3u8 files.
            </summary>
            <value>
            The user agent.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.HasAudio">
            <summary> 
            Returns whether the given media has audio. 
            Only valid after the MediaOpened event has fired.
            </summary> 
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.HasVideo">
            <summary> 
            Returns whether the given media has video. Only valid after the
            MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.VideoCodec">
            <summary>
            Gets the video codec.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.VideoBitrate">
            <summary>
            Gets the video bitrate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.NaturalVideoWidth">
            <summary>
            Returns the natural width of the media in the video.
            Only valid after the MediaOpened event has fired.
            </summary> 
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.NaturalVideoHeight">
            <summary> 
            Returns the natural height of the media in the video.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.VideoFrameRate">
            <summary>
            Gets the video frame rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.VideoFrameLength">
            <summary>
            Gets the length of the video frame.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.AudioCodec">
            <summary>
            Gets the audio codec.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.AudioBitrate">
            <summary>
            Gets the audio bitrate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.AudioChannels">
            <summary>
            Gets the audio channels count.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.AudioOutputBitsPerSample">
            <summary>
            Gets the audio output bits per sample.
            Only valid after the MediaOpened event has fired.
            This value will always have to be 16
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.AudioSampleRate">
            <summary>
            Gets the audio sample rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.AudioOutputSampleRate">
            <summary>
            Gets the audio output sample rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.AudioBytesPerSample">
            <summary>
            Gets the audio bytes per sample.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.NaturalDuration">
            <summary>
            Gets the Media's natural duration
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.CanPause">
            <summary>
            Returns whether the given media can be paused. 
            This is only valid after the MediaOpened event has fired.
            Note: This property is computed based on wether the stream is detected to be a live stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.IsPlaying">
            <summary>
            Gets a value indicating whether the media is playing.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.HasMediaEnded">
            <summary>
            Gets a value indicating whether the media has reached its end.
            </summary>
            <value>
            <c>true</c> if this instance has media ended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.HandleMediaPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the underlying media.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.OnMediaError(System.Object,System.Exception)">
            <summary>
            Called when a media error occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.OpenMedia(System.Uri,System.String,System.String)">
            <summary>
            Opens the media.
            </summary>
            <param name="sourceUri">The source URI.</param>
            <param name="referer">The referer. Optional -- Leave null or empty if you do not wish to set it.</param>
            <param name="userAgent">The user agent. Optional -- Leave null or empty if you do not wish to set it.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.CloseMedia(System.Boolean)">
            <summary>
            Closes the media.
            </summary>
            <param name="updateProperties">if set to <c>true</c> [update properties].</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.UpdateMediaProperties">
            <summary>
            Updates the media properties.
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.MediaElement.RoutedEventNames">
            <summary>
            Defines constants that contain Routed event names
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.MediaFailedEvent">
            <summary>
            MediaFailedEvent is a routed event. 
            </summary>
        </member>
        <member name="E:Unosquare.FFmpegMediaElement.MediaElement.MediaFailed">
            <summary>
            Raised when the media fails to load or a fatal error has occurred which prevents playback.
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.MediaErroredEvent">
            <summary>
            MediaErrorEvent is a routed event. 
            </summary>
        </member>
        <member name="E:Unosquare.FFmpegMediaElement.MediaElement.MediaErrored">
            <summary>
            Raised when a problem with the media is found
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.MediaOpenedEvent">
            <summary> 
            MediaOpened is a routed event.
            </summary> 
        </member>
        <member name="E:Unosquare.FFmpegMediaElement.MediaElement.MediaOpened">
            <summary>
            Raised when the media is opened 
            </summary> 
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.MediaElement.MediaEndedEvent">
            <summary>
            MediaEnded is a routed event 
            </summary>
        </member>
        <member name="E:Unosquare.FFmpegMediaElement.MediaElement.MediaEnded">
            <summary> 
            Raised when the corresponding media ends.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.GetCurrentFrame">
            <summary>
            Gets the current frame being displayed
            </summary>
            <returns>Clone of the current frame</returns>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.MediaElement.FFmpegPaths">
            <summary>
            Provides access to the paths where FFmpeg binaries are extracted to
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.FFmpegPaths.#cctor">
            <summary>
            Initializes the <see cref="T:Unosquare.FFmpegMediaElement.MediaElement.FFmpegPaths"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.FFmpegPaths.RegisterFFmpeg">
            <summary>
            Extract and register FFmpeg from resources
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.FFmpegPaths.BasePath">
            <summary>
            Gets the path to where the FFmpeg binaries are stored
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.FFmpegPaths.FFmpeg">
            <summary>
            Gets the full path to ffmpeg.exe
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.FFmpegPaths.FFprobe">
            <summary>
            Gets the full path to ffprobe.exe
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.FFmpegPaths.FFplay">
            <summary>
            Gets the full path to ffplay.exe
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.#cctor">
            <summary>
            Initializes the <see cref="T:Unosquare.FFmpegMediaElement.MediaElement"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFmpegMediaElement.MediaElement"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.InitializeSeekPositionTimer">
            <summary>
            Initializes the seek position timer.
            </summary>
        </member>
        <member name="E:Unosquare.FFmpegMediaElement.MediaElement.PropertyChanged">
            <summary>
            Multicast event for property change notifications.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaElement.System#Windows#Markup#IUriContext#BaseUri">
            <summary>
            Gets or sets the base URI of the current application context.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.DumpState(System.Boolean)">
            <summary>
            Dumps the state into a string dictionary.
            Optionally, it prints the output to the debugging console
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.Play">
            <summary>
            Begins playback if not already playing
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.Pause">
            <summary>
            Pauses media playback.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.Stop">
            <summary>
            Stops media playback.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaElement.Close">
            <summary>
            Closes the media source and releases its resources
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.Helper">
            <summary>
            Provides methods and constants for miscellaneous operations
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.Helper.NativeMethods">
            <summary>
            Miscellaneous native methods
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.Helper.ExtractFFmpegDlls(System.String)">
            <summary>
            Extracts the FFmpeg Dlls.
            </summary>
            <param name="resourcePrefix">The resource prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.Helper.RegisterFFmpeg">
            <summary>
            Registers FFmpeg library and initializes its components.
            </summary>
            <exception cref="T:System.BadImageFormatException"></exception>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.Helper.IsInDesignTime">
            <summary>
            Determines if we are currently in Design Time
            </summary>
            <value>
            <c>true</c> if this instance is in design time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.Helper.TimestampToSeconds(System.Int64,FFmpeg.AutoGen.AVRational)">
            <summary>
            Converts a Timestamp to seconds.
            </summary>
            <param name="ts">The ts.</param>
            <param name="streamTimeBase">The stream time base.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.Helper.SecondsToTimestamp(System.Decimal,FFmpeg.AutoGen.AVRational)">
            <summary>
            Converts seconds to a timestamp value.
            </summary>
            <param name="seconds">The seconds.</param>
            <param name="streamTimeBase">The stream time base.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.Helper.GetFFmpegErrorMessage(System.Int32)">
            <summary>
            Gets the FFmpeg error mesage based on the error code
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache">
            <summary>
            Represents a set of ordered media frames of a given type
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.Capacity">
            <summary>
            Gets the capacity in number frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.Count">
            <summary>
            Gets the current amount of frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.MiddleIndex">
            <summary>
            Gets the index of the middle frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.FirstFrameTime">
            <summary>
            Gets the PTS in seconds of the first frame
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.LastFrameTime">
            <summary>
            Gets the PTS in seconds of the last frame
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.MiddleFrameTime">
            <summary>
            Gets the PTS in seconds of the middle frame
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.StartTime">
            <summary>
            Gets the best effort resentation time (PTS) of the first frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.EndTime">
            <summary>
            Gets the end time. Last Frame Time + Last Frame Duration
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.Duration">
            <summary>
            Gets the total duration from the first frame start time to 
            the last frame start time + its duration.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.IsFull">
            <summary>
            Gets a value indicating whether this cache is full.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.IsEmpty">
            <summary>
            Gets a value indicating whether this cache is empty.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.Type">
            <summary>
            Gets the type of frames this cache is holding.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.MiddleFrame">
            <summary>
            Gets the frame right at the middle of the collection
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.FirstFrame">
            <summary>
            Gets the first frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.LastFrame">
            <summary>
            Gets the last frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.#ctor(Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache"/> class.
            This copies all properties from an existing cache excluding frames of course.
            </summary>
            <param name="otherCache">The other cache.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.#ctor(System.Decimal,Unosquare.FFmpegMediaElement.MediaFrameType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache"/> class.
            </summary>
            <param name="frameRate">The frame rate.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.RecomputeProperties">
            <summary>
            Recomputes the properties.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.ThrowInvalidFrameTypeException(Unosquare.FFmpegMediaElement.MediaFrameType)">
            <summary>
            Throws the invalid frame type exception.
            </summary>
            <param name="frameType">Type of the frame.</param>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.Replace(Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache)">
            <summary>
            Replaces the internally-held frames with the specified new frames.
            </summary>
            <param name="newFrames">The new frames.</param>
            <exception cref="T:System.IndexOutOfRangeException">Buffer does not support the capacity of new elements</exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.Add(Unosquare.FFmpegMediaElement.FFmpegMediaFrame)">
            <summary>
            Adds the specified frame at the right location.
            This method ensures the collection stays ordered
            </summary>
            <param name="frame">The frame.</param>
            <exception cref="T:System.IndexOutOfRangeException">Buffer is already at capacity.</exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.RemoveFirst">
            <summary>
            Removes the first frame and releases it.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.RemoveLast">
            <summary>
            Removes the last frame and releases it.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.Clear">
            <summary>
            Clears all the frames and releases them.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.SearchFrame(System.Decimal)">
            <summary>
            Highly optimized frame search function combining guess, binary and finally, linear search
            </summary>
            <param name="renderTime">The render time.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.GetFrameAt(System.Int32)">
            <summary>
            Gets the frame at the given index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.GetFrame(System.Decimal,System.Boolean)">
            <summary>
            Gets a frame at the given render time.
            </summary>
            <param name="renderTime">The render time.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.GetFrames(System.Decimal,System.Int32)">
            <summary>
            Gets a maximum of frameCount frames at the given starting renderTime
            </summary>
            <param name="renderTime">The render time.</param>
            <param name="frameCount">The frame count.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.GetFrames(System.Decimal,System.Decimal)">
            <summary>
            Gets a maximum duration of frames at the given starting renderTime
            </summary>
            <param name="renderTime">The render time.</param>
            <param name="duration">The duration.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.IndexOf(Unosquare.FFmpegMediaElement.FFmpegMediaFrame)">
            <summary>
            Gets the index of the frame. Returns -1 for not found.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrameCache.IndexOf(System.Decimal,System.Boolean)">
            <summary>
            Gets the index of the frame.
            Returns -1 if not found.
            </summary>
            <param name="renderTime">The render time.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.MediaFrameType">
            <summary>
            Enumerates the different media frame types
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.FFmpegMediaFrame">
            <summary>
            Represents a video or audio frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.PictureType">
            <summary>
            For video frames, gets or sets the type of the picture.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.StartTime">
            <summary>
            Gets the frame's best effort PTS in seconds
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.PictureBufferPtr">
            <summary>
            For video frames, gets the pointer to the decoded picture buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.PictureBufferLength">
            <summary>
            For video frames, gets the length of the decoded picture buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.CodedPictureNumber">
            <summary>
            For video frames, gets the coded picture number.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.Duration">
            <summary>
            Gets the duration in seconds of the frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.Timestamp">
            <summary>
            Gets the frame's best effort PTS
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.Type">
            <summary>
            Gets the type of frame
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.StreamIndex">
            <summary>
            Gets the stream index this frame belongs to
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.AudioBuffer">
            <summary>
            For audio frames, holds the bytes array with the decoded waveform
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.Picture">
            <summary>
            For video frames, A pointer to the decodes picture
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.PictureBuffer">
            <summary>
            For video frames, A Pointer to the decoded picture buffer
            </summary>
        </member>
        <member name="F:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.ReleaseLock">
            <summary>
            Synchronized lock for frame disposal
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.FFmpegMediaFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFmpegMediaElement.FFmpegMediaFrame"/> class.
            All properties need to be set immediately after instantiation
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.FFmpegMediaFrameFlags">
            <summary>
            Enumerates the flags of a decoded frame
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.FFmpegPictureType">
            <summary>
            Enumerates the picture types for video frames
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.MediaErrorRoutedEventArgs">
            <summary>
            Represents an event that occurs when the underlying media stream fails to load or
            corrupt packets are found within the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaErrorRoutedEventArgs.ErrorException">
            <summary>
            Gets the error exception.
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.MediaPlaybackErrorCode">
            <summary>
            Enumerates Media Playback error codes
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.MediaPlaybackException">
            <summary>
            Represents an error that occurs during media playback or during a seek operation.
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.MediaTimer">
            <summary>
            A high precision timer designed to keep track of
            media playback. Control methods mimic media playback
            control methods such as Play Pause, Stop and Seek
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFmpegMediaElement.MediaTimer"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaTimer.IsPlaying">
            <summary>
            Gets a value indicating whether the timer is running. If the timer is stopped or paused,
            then this property will return false.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaTimer.Stop">
            <summary>
            Stops the timer and makes the elapsed time effectively 0
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaTimer.Play">
            <summary>
            Starts or resumes the timer
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaTimer.Pause">
            <summary>
            Pauses the timer
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaTimer.Seek(System.TimeSpan)">
            <summary>
            Sets the Position to the specified value.
            If the timer is running, it will be paused after this method call.
            </summary>
            <param name="ts">The ts.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaTimer.Seek(System.Decimal)">
            <summary>
            Sets the Position to the specified value.
            If the timer is running, it will be paused after this method call.
            </summary>
            <param name="seconds">The seconds.</param>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.MediaTimer.Seek(System.Int64)">
            <summary>
            Sets the Position to the specified value.
            If the timer is running, it will be paused after this method call.
            </summary>
            <param name="ticks">The ticks.</param>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaTimer.SpeedRatio">
            <summary>
            Gets or sets the speed ratio at which the timer runs.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaTimer.PositionTicks">
            <summary>
            Gets or Sets the position in ticks.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaTimer.PositionSeconds">
            <summary>
            Gets or Sets the position in the elapsed seconds
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.MediaTimer.Position">
            <summary>
            Gets or Sets the TimeSpan representing the total elapsed milliseconds.
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.Properties.Resources.FFmpegMediaElementBackground">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.IAudioDataProvider">
            <summary>
            An interface that defines a callback method providing audio data
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.IAudioDataProvider.RenderAudioBuffer(System.Byte[],System.Int32@)">
            <summary>
            When called in its implementation, this method fills the buffer with audio data and sets the amount of bytes written
            </summary>
            <param name="bufferToFill">The buffer to fill.</param>
            <param name="bytesWritten">The bytes written.</param>
            <returns>True if the audio device should request more samples. False if the audio device needs to be shutdown</returns>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.AudioRenderer">
            <summary>
            Represents a calss that renders audio data to speakers
            via callbacks
            </summary>
        </member>
        <member name="T:Unosquare.FFmpegMediaElement.AudioRenderer.CallbackWaveProvider16">
            <summary>
            A thread-safe callback provider
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.AudioRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFmpegMediaElement.AudioRenderer"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.AudioRenderer.Initialize(Unosquare.FFmpegMediaElement.IAudioDataProvider,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the specified provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="channels">The channels.</param>
            <param name="bitsPerSample">The bits per sample.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Wave device already started</exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.AudioRenderer.Stop">
            <summary>
            Stops the underlying audio device
            </summary>
            <exception cref="T:System.InvalidOperationException">Wave device not started</exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.AudioRenderer.Play">
            <summary>
            Plays the underlying audio device
            </summary>
            <exception cref="T:System.InvalidOperationException">Wave device not started</exception>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.AudioRenderer.Pause">
            <summary>
            Pauses the underlying audio device
            </summary>
            <exception cref="T:System.InvalidOperationException">Wave device not started</exception>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.AudioRenderer.HasInitialized">
            <summary>
            Gets a value indicating whether this instance has initialized.
            </summary>
            <value>
            <c>true</c> if this instance has initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFmpegMediaElement.AudioRenderer.Volume">
            <summary>
            Gets or sets the volume (amplitude) of the data samples.
            Valid range is from 0.0 to 1.0
            </summary>
        </member>
        <member name="M:Unosquare.FFmpegMediaElement.AudioRenderer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NAudio.Wave.AdpcmWaveFormat">
            <summary>
            Microsoft ADPCM
            See http://icculus.org/SDL_sound/downloads/external_documentation/wavecomp.htm
            </summary>
        </member>
        <member name="M:NAudio.Wave.AdpcmWaveFormat.#ctor">
            <summary>
            Empty constructor needed for marshalling from a pointer
            </summary>
        </member>
        <member name="P:NAudio.Wave.AdpcmWaveFormat.SamplesPerBlock">
            <summary>
            Samples per block
            </summary>
        </member>
        <member name="P:NAudio.Wave.AdpcmWaveFormat.NumCoefficients">
            <summary>
            Number of coefficients
            </summary>
        </member>
        <member name="P:NAudio.Wave.AdpcmWaveFormat.Coefficients">
            <summary>
            Coefficients
            </summary>
        </member>
        <member name="M:NAudio.Wave.AdpcmWaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Microsoft ADPCM  
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Channels</param>
        </member>
        <member name="M:NAudio.Wave.AdpcmWaveFormat.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes this wave format
            </summary>
            <param name="writer">Binary writer</param>
        </member>
        <member name="M:NAudio.Wave.AdpcmWaveFormat.ToString">
            <summary>
            String Description of this WaveFormat
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut">
            <summary>
            NativeDirectSoundOut using DirectSound COM interop.
            Contact author: Alexandre Mutel - alexandre_mutel at yahoo.fr
            Modified by: Graham "Gee" Plumb
            </summary>
        </member>
        <member name="E:NAudio.Wave.DirectSoundOut.PlaybackStopped">
            <summary>
            Playback Stopped
            </summary>
        </member>
        <member name="P:NAudio.Wave.DirectSoundOut.Devices">
            <summary>
            Gets the DirectSound output devices in the system
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.DirectSoundOut"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.DirectSoundOut"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.DirectSoundOut"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.DirectSoundOut"/> class.
            (40ms seems to work under Vista).
            </summary>
            <param name="latency">The latency.</param>
            <param name="device">Selected device</param>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:NAudio.Wave.DirectSoundOut"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Play">
            <summary>
            Begin playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Stop">
            <summary>
            Stop playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Pause">
            <summary>
            Pause Playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.GetPosition">
            <summary>
            Gets the current position in bytes from the wave output device.
            (n.b. this is not the same thing as the position within your reader
            stream)
            </summary>
            <returns>Position in bytes</returns>
        </member>
        <member name="P:NAudio.Wave.DirectSoundOut.PlaybackPosition">
            <summary>
            Gets the current position from the wave output device.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Init(NAudio.Wave.IWaveProvider)">
            <summary>
            Initialise playback
            </summary>
            <param name="waveProvider">The waveprovider to be played</param>
        </member>
        <member name="P:NAudio.Wave.DirectSoundOut.PlaybackState">
            <summary>
            Current playback state
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.DirectSoundOut.Volume">
            <summary>
            The volume 1.0 is full scale
            </summary>
            <value></value>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IsBufferLost">
            <summary>
            Determines whether the SecondaryBuffer is lost.
            </summary>
            <returns>
            	<c>true</c> if [is buffer lost]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.MsToBytes(System.Int32)">
            <summary>
            Convert ms to bytes size according to WaveFormat
            </summary>
            <param name="ms">The ms</param>
            <returns>number of byttes</returns>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.PlaybackThreadFunc">
            <summary>
            Processes the samples in a separate thread.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.StopPlayback">
            <summary>
            Stop playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Feed(System.Int32)">
            <summary>
            Feeds the SecondaryBuffer with the WaveStream
            </summary>
            <param name="bytesToCopy">number of bytes to feed</param>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.IDirectSound">
            <summary>
            IDirectSound interface
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer">
            <summary>
            IDirectSoundBuffer interface
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.IDirectSoundNotify">
            <summary>
            IDirectSoundNotify interface
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.DirectSoundCreate(System.Guid@,NAudio.Wave.DirectSoundOut.IDirectSound@,System.IntPtr)">
            <summary>
            Instanciate DirectSound from the DLL
            </summary>
            <param name="GUID">The GUID.</param>
            <param name="directSound">The direct sound.</param>
            <param name="pUnkOuter">The p unk outer.</param>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DSDEVID_DefaultPlayback">
            <summary>
            DirectSound default playback device GUID 
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DSDEVID_DefaultCapture">
            <summary>
            DirectSound default capture device GUID
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DSDEVID_DefaultVoicePlayback">
            <summary>
            DirectSound default device for voice playback
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DSDEVID_DefaultVoiceCapture">
            <summary>
            DirectSound default device for voice capture
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.DSEnumCallback">
            <summary>
            The DSEnumCallback function is an application-defined callback function that enumerates the DirectSound drivers. 
            The system calls this function in response to the application's call to the DirectSoundEnumerate or DirectSoundCaptureEnumerate function.
            </summary>
            <param name="lpGuid">Address of the GUID that identifies the device being enumerated, or NULL for the primary device. This value can be passed to the DirectSoundCreate8 or DirectSoundCaptureCreate8 function to create a device object for that driver. </param>
            <param name="lpcstrDescription">Address of a null-terminated string that provides a textual description of the DirectSound device. </param>
            <param name="lpcstrModule">Address of a null-terminated string that specifies the module name of the DirectSound driver corresponding to this device. </param>
            <param name="lpContext">Address of application-defined data. This is the pointer passed to DirectSoundEnumerate or DirectSoundCaptureEnumerate as the lpContext parameter. </param>
            <returns>Returns TRUE to continue enumerating drivers, or FALSE to stop.</returns>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.DirectSoundEnumerate(NAudio.Wave.DirectSoundOut.DSEnumCallback,System.IntPtr)">
            <summary>
            The DirectSoundEnumerate function enumerates the DirectSound drivers installed in the system.
            </summary>
            <param name="lpDSEnumCallback">callback function</param>
            <param name="lpContext">User context</param>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.GetDesktopWindow">
            <summary>
            Gets the HANDLE of the desktop window.
            </summary>
            <returns>HANDLE of the Desktop window</returns>
        </member>
        <member name="T:NAudio.Wave.DirectSoundDeviceInfo">
            <summary>
            Class for enumerating DirectSound devices
            </summary>
        </member>
        <member name="P:NAudio.Wave.DirectSoundDeviceInfo.Guid">
            <summary>
            The device identifier
            </summary>
        </member>
        <member name="P:NAudio.Wave.DirectSoundDeviceInfo.Description">
            <summary>
            Device description
            </summary>
        </member>
        <member name="P:NAudio.Wave.DirectSoundDeviceInfo.ModuleName">
            <summary>
            Device module name
            </summary>
        </member>
        <member name="T:NAudio.Wave.Gsm610WaveFormat">
            <summary>
            GSM 610
            </summary>
        </member>
        <member name="M:NAudio.Wave.Gsm610WaveFormat.#ctor">
            <summary>
            Creates a GSM 610 WaveFormat
            For now hardcoded to 13kbps
            </summary>
        </member>
        <member name="P:NAudio.Wave.Gsm610WaveFormat.SamplesPerBlock">
            <summary>
            Samples per block
            </summary>
        </member>
        <member name="M:NAudio.Wave.Gsm610WaveFormat.Serialize(System.IO.BinaryWriter)">
            <summary>
            Writes this structure to a BinaryWriter
            </summary>
        </member>
        <member name="T:NAudio.Wave.IWavePlayer">
            <summary>
            Represents the interface to a device that can play a WaveFile
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWavePlayer.Play">
            <summary>
            Begin playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWavePlayer.Stop">
            <summary>
            Stop playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWavePlayer.Pause">
            <summary>
            Pause Playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWavePlayer.Init(NAudio.Wave.IWaveProvider)">
            <summary>
            Initialise playback
            </summary>
            <param name="waveProvider">The waveprovider to be played</param>
        </member>
        <member name="P:NAudio.Wave.IWavePlayer.PlaybackState">
            <summary>
            Current playback state
            </summary>
        </member>
        <member name="P:NAudio.Wave.IWavePlayer.Volume">
            <summary>
            The volume 1.0 is full scale
            </summary>
        </member>
        <member name="E:NAudio.Wave.IWavePlayer.PlaybackStopped">
            <summary>
            Indicates that playback has gone into a stopped state due to 
            reaching the end of the input stream or an error has been encountered during playback
            </summary>
        </member>
        <member name="T:NAudio.Wave.IWavePosition">
            <summary>
            Interface for IWavePlayers that can report position
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWavePosition.GetPosition">
            <summary>
            Position (in terms of bytes played - does not necessarily)
            </summary>
            <returns>Position in bytes</returns>
        </member>
        <member name="P:NAudio.Wave.IWavePosition.OutputWaveFormat">
            <summary>
            Gets a <see cref="T:NAudio.Wave.WaveFormat"/> instance indicating the format the hardware is using.
            </summary>
        </member>
        <member name="T:NAudio.Wave.IWaveProvider">
            <summary>
            Generic interface for all WaveProviders.
            </summary>
        </member>
        <member name="P:NAudio.Wave.IWaveProvider.WaveFormat">
            <summary>
            Gets the WaveFormat of this WaveProvider.
            </summary>
            <value>The wave format.</value>
        </member>
        <member name="M:NAudio.Wave.IWaveProvider.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fill the specified buffer with wave data.
            </summary>
            <param name="buffer">The buffer to fill of wave data.</param>
            <param name="offset">Offset into buffer</param>
            <param name="count">The number of bytes to read</param>
            <returns>the number of bytes written to the buffer.</returns>
        </member>
        <member name="T:NAudio.Wave.PlaybackState">
            <summary>
            Playback State
            </summary>
        </member>
        <member name="F:NAudio.Wave.PlaybackState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:NAudio.Wave.PlaybackState.Playing">
            <summary>
            Playing
            </summary>
        </member>
        <member name="F:NAudio.Wave.PlaybackState.Paused">
            <summary>
            Paused
            </summary>
        </member>
        <member name="T:NAudio.Wave.StoppedEventArgs">
            <summary>
            Stopped Event Args
            </summary>
        </member>
        <member name="M:NAudio.Wave.StoppedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of StoppedEventArgs
            </summary>
            <param name="exception">An exception to report (null if no exception)</param>
        </member>
        <member name="P:NAudio.Wave.StoppedEventArgs.Exception">
            <summary>
            An exception. Will be null if the playback or record operation stopped
            </summary>
        </member>
        <member name="T:NAudio.Wave.VolumeWaveProvider16">
            <summary>
            Helper class allowing us to modify the volume of a 16 bit stream without converting to IEEE float
            </summary>
        </member>
        <member name="M:NAudio.Wave.VolumeWaveProvider16.#ctor(NAudio.Wave.IWaveProvider)">
            <summary>
            Constructs a new VolumeWaveProvider16
            </summary>
            <param name="sourceProvider">Source provider, must be 16 bit PCM</param>
        </member>
        <member name="P:NAudio.Wave.VolumeWaveProvider16.Volume">
            <summary>
            Gets or sets volume. 
            1.0 is full scale, 0.0 is silence, anything over 1.0 will amplify but potentially clip
            </summary>
        </member>
        <member name="P:NAudio.Wave.VolumeWaveProvider16.WaveFormat">
            <summary>
            WaveFormat of this WaveProvider
            </summary>
        </member>
        <member name="M:NAudio.Wave.VolumeWaveProvider16.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read bytes from this WaveProvider
            </summary>
            <param name="buffer">Buffer to read into</param>
            <param name="offset">Offset within buffer to read to</param>
            <param name="count">Bytes desired</param>
            <returns>Bytes read</returns>
        </member>
        <member name="T:NAudio.Wave.WaveFormat">
            <summary>
            Represents a Wave file format
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.waveFormatTag">
            <summary>format type</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.#ctor">
            <summary>
            Creates a new PCM 44.1Khz stereo 16 bit format
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new 16 bit wave format with the specified sample
            rate and channel count
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.CreateCustomFormat(NAudio.Wave.WaveFormatEncoding,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a WaveFormat with custom members
            </summary>
            <param name="tag">The encoding</param>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
            <param name="averageBytesPerSecond">Average Bytes Per Second</param>
            <param name="blockAlign">Block Align</param>
            <param name="bitsPerSample">Bits Per Sample</param>
            <returns></returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.CreateALawFormat(System.Int32,System.Int32)">
            <summary>
            Creates an A-law wave format
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of Channels</param>
            <returns>Wave Format</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.CreateMuLawFormat(System.Int32,System.Int32)">
            <summary>
            Creates a Mu-law wave format
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of Channels</param>
            <returns>Wave Format</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new PCM format with the specified sample rate, bit depth and channels
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.CreateIeeeFloatWaveFormat(System.Int32,System.Int32)">
            <summary>
            Creates a new 32 bit IEEE floating point wave format
            </summary>
            <param name="sampleRate">sample rate</param>
            <param name="channels">number of channels</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.MarshalFromPtr(System.IntPtr)">
            <summary>
            Helper function to retrieve a WaveFormat structure from a pointer
            </summary>
            <param name="pointer">WaveFormat structure</param>
            <returns></returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.MarshalToPtr(NAudio.Wave.WaveFormat)">
            <summary>
            Helper function to marshal WaveFormat to an IntPtr
            </summary>
            <param name="format">WaveFormat</param>
            <returns>IntPtr to WaveFormat structure (needs to be freed by callee)</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.FromFormatChunk(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads in a WaveFormat (with extra data) from a fmt chunk (chunk identifier and
            length should already have been read)
            </summary>
            <param name="br">Binary reader</param>
            <param name="formatChunkLength">Format chunk length</param>
            <returns>A WaveFormatExtraData</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.#ctor(System.IO.BinaryReader)">
            <summary>
            Reads a new WaveFormat object from a stream
            </summary>
            <param name="br">A binary reader that wraps the stream</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.ToString">
            <summary>
            Reports this WaveFormat as a string
            </summary>
            <returns>String describing the wave format</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.Equals(System.Object)">
            <summary>
            Compares with another WaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.Encoding">
            <summary>
            Returns the encoding type used
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.Serialize(System.IO.BinaryWriter)">
            <summary>
            Writes this WaveFormat object to a stream
            </summary>
            <param name="writer">the output stream</param>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.Channels">
            <summary>
            Returns the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.SampleRate">
            <summary>
            Returns the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.AverageBytesPerSecond">
            <summary>
            Returns the average number of bytes used per second
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.BlockAlign">
            <summary>
            Returns the block alignment
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.BitsPerSample">
            <summary>
            Returns the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.ExtraSize">
            <summary>
            Returns the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveFormatEncoding">
            <summary>
            Summary description for WaveFormatEncoding.
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Unknown">
            <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Pcm">
            <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Adpcm">
            <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.IeeeFloat">
            <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vselp">
            <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.IbmCvsd">
            <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.ALaw">
            <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MuLaw">
            <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Dts">
            <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Drm">
            <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WmaVoice9">
            <summary>WAVE_FORMAT_WMAVOICE9 </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.OkiAdpcm">
            <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DviAdpcm">
            <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.ImaAdpcm">
            <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MediaspaceAdpcm">
            <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.SierraAdpcm">
            <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.G723Adpcm">
            <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DigiStd">
            <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DigiFix">
            <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DialogicOkiAdpcm">
            <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MediaVisionAdpcm">
            <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.CUCodec">
            <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.YamahaAdpcm">
            <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.SonarC">
            <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DspGroupTrueSpeech">
            <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.EchoSpeechCorporation1">
            <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.AudioFileAf36">
            <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Aptx">
            <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.AudioFileAf10">
            <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Prosody1612">
            <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Lrc">
            <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DolbyAc2">
            <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Gsm610">
            <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MsnAudio">
            <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.AntexAdpcme">
            <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.ControlResVqlpc">
            <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DigiReal">
            <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DigiAdpcm">
            <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.ControlResCr10">
            <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_NMS_VBXADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CS_IMAADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ECHOSC3">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_DIGITALK">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_XEBEC">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G721_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G728_CELP">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MSG723">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Mpeg">
            <summary>WAVE_FORMAT_MPEG, Microsoft Corporation </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_RT24">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_PAC">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MpegLayer3">
            <summary>WAVE_FORMAT_MPEGLAYER3, ISO/MPEG Layer3 Format Tag </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_LUCENT_G723">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CIRRUS">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ESPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CANOPUS_ATRAC">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G726_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G722_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DSAT_DISPLAY">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_BYTE_ALIGNED">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC8">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC10">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC16">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC20">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT24">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29HW">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR12">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR18">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ40">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SOFTSOUND">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ60">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MSRT24">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G729A">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MVI_MVI2">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DF_G726">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DF_GSM610">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ISIAUDIO">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ONLIVE">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SBC24">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DOLBY_AC3_SPDIF">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MEDIASONIC_G723">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_PROSODY_8KBPS">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ZYXEL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_PHILIPS_LPCBB">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_PACKED">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MALDEN_PHONYTALK">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Gsm">
            <summary>WAVE_FORMAT_GSM</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.G729">
            <summary>WAVE_FORMAT_G729</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.G723">
            <summary>WAVE_FORMAT_G723</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Acelp">
            <summary>WAVE_FORMAT_ACELP</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.RawAac">
            <summary>
            WAVE_FORMAT_RAW_AAC1
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_RHETOREX_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_IRAT">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VIVO_G723">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VIVO_SIREN">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DIGITAL_G723">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SANYO_LD_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACEPLNET">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP4800">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP8V3">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729A">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_KELVIN">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G726ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_PUREVOICE">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_HALFRATE">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_TUBGSM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MSAUDIO1">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WindowsMediaAudio">
            <summary>
            Windows Media Audio, WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WindowsMediaAudioProfessional">
            <summary>
            Windows Media Audio Professional WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WindowsMediaAudioLosseless">
            <summary>
            Windows Media Audio Lossless, WAVE_FORMAT_WMAUDIO_LOSSLESS
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WindowsMediaAudioSpdif">
            <summary>
            Windows Media Audio Professional over SPDIF WAVE_FORMAT_WMASPDIF (0x0164)
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ULAW">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ALAW">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_16K">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH8">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH10">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UHER_ADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_QUARTERDECK">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ILINK_VC">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_RAW_SPORT">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ESST_AC3">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_IPI_HSX">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_IPI_RPELP">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CS2">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SONY_SCX">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_FM_TOWNS_SND">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_BTV_DIGITAL">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_QDESIGN_MUSIC">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VME_VMPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_TPC">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLIGSM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLIADPCM">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLICELP">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLISBC">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLIOPR">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_LH_CODEC">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_NORRIS">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS">
            <summary></summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MPEG_ADTS_AAC">
            <summary>
            Advanced Audio Coding (AAC) audio in Audio Data Transport Stream (ADTS) format.
            The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_ADTS_AAC.
            </summary>
            <remarks>
            The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels, 
            prior to applying spectral band replication (SBR) or parametric stereo (PS) tools, if present.
            No additional data is required after the WAVEFORMATEX structure.
            </remarks>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MPEG_RAW_AAC">
            <summary></summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MPEG_LOAS">
            <summary>
            MPEG-4 audio transport stream with a synchronization layer (LOAS) and a multiplex layer (LATM).
            The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_LOAS.
            </summary>
            <remarks>
            The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels, 
            prior to applying spectral SBR or PS tools, if present.
            No additional data is required after the WAVEFORMATEX structure.
            </remarks>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.NOKIA_MPEG_ADTS_AAC">
            <summary>NOKIA_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.NOKIA_MPEG_RAW_AAC">
            <summary>NOKIA_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.VODAFONE_MPEG_ADTS_AAC">
            <summary>VODAFONE_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.VODAFONE_MPEG_RAW_AAC">
            <summary>VODAFONE_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MPEG_HEAAC">
            <summary>
            High-Efficiency Advanced Audio Coding (HE-AAC) stream.
            The format block is an HEAACWAVEFORMAT structure.
            </summary>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DVM">
            <summary>WAVE_FORMAT_DVM</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis1">
            <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis2">
            <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis3">
            <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis1P">
            <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis2P">
            <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis3P">
            <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Extensible">
            <summary>WAVE_FORMAT_EXTENSIBLE</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DEVELOPMENT">
            <summary></summary>
        </member>
        <member name="T:NAudio.Wave.WaveFormatExtensible">
            <summary>
            WaveFormatExtensible
            http://www.microsoft.com/whdc/device/audio/multichaud.mspx
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtensible.#ctor">
            <summary>
            Parameterless constructor for marshalling
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtensible.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new WaveFormatExtensible for PCM or IEEE
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtensible.ToStandardWaveFormat">
            <summary>
            WaveFormatExtensible for PCM or floating point can be awkward to work with
            This creates a regular WaveFormat structure representing the same audio format
            Returns the WaveFormat unchanged for non PCM or IEEE float
            </summary>
            <returns></returns>
        </member>
        <member name="P:NAudio.Wave.WaveFormatExtensible.SubFormat">
            <summary>
            SubFormat (may be one of AudioMediaSubtypes)
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtensible.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtensible.ToString">
            <summary>
            String representation
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveFormatExtraData">
            <summary>
            This class used for marshalling from unmanaged code
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormatExtraData.ExtraData">
            <summary>
            Allows the extra data to be read
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtraData.#ctor">
            <summary>
            parameterless constructor for marshalling
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtraData.#ctor(System.IO.BinaryReader)">
            <summary>
            Reads this structure from a BinaryReader
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtraData.Serialize(System.IO.BinaryWriter)">
            <summary>
            Writes this structure to a BinaryWriter
            </summary>
        </member>
    </members>
</doc>
